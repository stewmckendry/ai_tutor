{
  "name": "Curriculum-Based Content Generator",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Every 6 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "operation": "list",
        "baseId": "app1FNYWApMBYHob0",
        "tableId": "tblHnzD5St4QA5m5N",
        "limit": 10,
        "options": {
          "fields": [
            "standard_title",
            "subject",
            "strand",
            "big_idea",
            "learning_goals",
            "key_vocabulary",
            "sample_activities"
          ],
          "filterByFormula": "AND({validation_status} = 'Approved', {grade_level} = 4)",
          "sort": {
            "property": "extraction_date",
            "direction": "desc"
          }
        }
      },
      "id": "fetch-curriculum-standards",
      "name": "Fetch Curriculum Standards",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [450, 400],
      "credentials": {
        "airtableTokenApi": {
          "id": "Airtable API",
          "name": "Airtable API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Select random curriculum standards for content generation\nconst standards = $input.all();\n\n// Group by subject\nconst subjectGroups = {};\nfor (const standard of standards) {\n  const subject = standard.json.subject;\n  if (!subjectGroups[subject]) {\n    subjectGroups[subject] = [];\n  }\n  subjectGroups[subject].push(standard.json);\n}\n\n// Select one standard from each subject (max 5)\nconst selectedStandards = [];\nconst subjects = Object.keys(subjectGroups).slice(0, 5);\n\nfor (const subject of subjects) {\n  const subjectStandards = subjectGroups[subject];\n  const randomIndex = Math.floor(Math.random() * subjectStandards.length);\n  selectedStandards.push(subjectStandards[randomIndex]);\n}\n\n// If no approved standards yet, use sample data\nif (selectedStandards.length === 0) {\n  selectedStandards.push({\n    standard_title: 'Science - Light and Sound',\n    subject: 'Science and Technology',\n    strand: 'Light and Sound',\n    big_idea: 'Light helps us see and sound helps us hear',\n    learning_goals: JSON.stringify([\n      'Understand how light travels',\n      'Explore how sounds are made',\n      'Investigate reflections'\n    ]),\n    key_vocabulary: JSON.stringify({\n      'reflection': 'Light bouncing off a surface',\n      'vibration': 'Quick back and forth movement that makes sound',\n      'transparent': 'See-through like glass'\n    }),\n    sample_activities: JSON.stringify([\n      'Make a periscope with mirrors',\n      'Create musical instruments from recycled materials'\n    ])\n  });\n}\n\nreturn selectedStandards.map(standard => ({ json: standard }));"
      },
      "id": "select-standards",
      "name": "Select Standards",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "jsCode": "// Generate content ideas based on curriculum standards\nconst items = [];\n\nfor (const item of $input.all()) {\n  const standard = item.json;\n  \n  // Parse JSON fields\n  let learningGoals = [];\n  let vocabulary = {};\n  let activities = [];\n  \n  try {\n    learningGoals = JSON.parse(standard.learning_goals || '[]');\n    vocabulary = JSON.parse(standard.key_vocabulary || '{}');\n    activities = JSON.parse(standard.sample_activities || '[]');\n  } catch (e) {\n    console.error('Error parsing JSON fields:', e);\n  }\n  \n  // Generate different content types\n  const contentTypes = [\n    {\n      type: 'Interactive Lesson',\n      format: 'lesson',\n      duration: '30 minutes',\n      focus: 'understanding'\n    },\n    {\n      type: 'Hands-On Activity',\n      format: 'activity',\n      duration: '20 minutes',\n      focus: 'exploration'\n    },\n    {\n      type: 'Quick Quiz',\n      format: 'assessment',\n      duration: '10 minutes',\n      focus: 'review'\n    },\n    {\n      type: 'Story Adventure',\n      format: 'narrative',\n      duration: '15 minutes',\n      focus: 'engagement'\n    },\n    {\n      type: 'Home Experiment',\n      format: 'homework',\n      duration: '25 minutes',\n      focus: 'application'\n    }\n  ];\n  \n  // Select a random content type\n  const contentType = contentTypes[Math.floor(Math.random() * contentTypes.length)];\n  \n  // Select a specific learning goal to focus on\n  const focusGoal = learningGoals[Math.floor(Math.random() * learningGoals.length)] || standard.big_idea;\n  \n  // Select vocabulary to emphasize\n  const vocabKeys = Object.keys(vocabulary);\n  const focusVocab = vocabKeys.slice(0, 3);\n  \n  items.push({\n    json: {\n      curriculum_standard: standard.standard_title,\n      subject: standard.subject,\n      strand: standard.strand,\n      big_idea: standard.big_idea,\n      content_type: contentType.type,\n      content_format: contentType.format,\n      duration: contentType.duration,\n      focus: contentType.focus,\n      learning_goal: focusGoal,\n      vocabulary_focus: focusVocab,\n      vocabulary_definitions: vocabulary,\n      suggested_activities: activities,\n      needs_generation: true\n    }\n  });\n}\n\nreturn items;"
      },
      "id": "generate-content-ideas",
      "name": "Generate Content Ideas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 400]
    },
    {
      "parameters": {
        "resource": "assistant",
        "operation": "create",
        "modelId": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are Maple, creating curriculum-aligned educational content for Ontario Grade 4 students.\n\nYou have access to official Ontario curriculum standards and must create engaging, age-appropriate content that directly addresses these learning objectives.\n\nContent Guidelines:\n1. Perfect for ages 9-10 (Grade 4)\n2. Uses Canadian English spelling\n3. Includes Canadian examples and contexts\n4. Metric measurements only\n5. Encourages discovery and critical thinking\n6. Never gives homework answers directly\n\nCreate content as JSON with:\n- title: Engaging title that hints at the learning\n- introduction: 2-3 sentences that hook students\n- main_content: The core educational content (varies by type)\n- activities: Step-by-step instructions for hands-on learning\n- discussion_prompts: 3 questions to spark thinking\n- vocabulary_practice: How to use new words\n- assessment_ideas: Ways to check understanding\n- canadian_connection: Local relevance\n- extension_ideas: For students who want more\n- materials_needed: Simple supplies list"
            },
            {
              "role": "user",
              "content": "Create {{ $json.content_type }} for Grade 4:\n\nCurriculum Standard: {{ $json.curriculum_standard }}\nSubject: {{ $json.subject }}\nStrand: {{ $json.strand }}\nBig Idea: {{ $json.big_idea }}\n\nContent Focus: {{ $json.focus }}\nFormat: {{ $json.content_format }}\nDuration: {{ $json.duration }}\n\nLearning Goal: {{ $json.learning_goal }}\n\nVocabulary to Include:\n{{ $json.vocabulary_focus.join(', ') }}\n\nDefinitions:\n{{ JSON.stringify($json.vocabulary_definitions) }}\n\nActivity Ideas:\n{{ $json.suggested_activities.join('; ') }}\n\nCreate engaging, curriculum-aligned content that makes learning fun!"
            }
          ]
        },
        "options": {
          "temperature": 0.8,
          "maxTokens": 800
        }
      },
      "id": "openai-generate",
      "name": "Generate Educational Content",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [1050, 400],
      "credentials": {
        "openAiApi": {
          "id": "OpenAI API",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format generated content for Canadian_Content table\nconst items = [];\n\nfor (const item of $input.all()) {\n  try {\n    // Parse AI response\n    let aiContent = {};\n    const responseText = item.json.response?.text || item.json.response || '';\n    \n    try {\n      aiContent = JSON.parse(responseText);\n    } catch (e) {\n      console.error('Failed to parse AI response:', e);\n      aiContent = {\n        title: item.json.curriculum_standard,\n        introduction: 'Educational content based on Ontario curriculum',\n        main_content: '',\n        activities: [],\n        discussion_prompts: [],\n        canadian_connection: 'Ontario Grade 4 curriculum'\n      };\n    }\n    \n    const originalData = item.json;\n    \n    // Format activities as string\n    let activityString = '';\n    if (Array.isArray(aiContent.activities)) {\n      activityString = aiContent.activities.join('; ');\n    } else if (typeof aiContent.activities === 'string') {\n      activityString = aiContent.activities;\n    } else if (typeof aiContent.activities === 'object') {\n      activityString = JSON.stringify(aiContent.activities);\n    }\n    \n    // Format discussion prompts\n    let discussionQuestions = [];\n    if (Array.isArray(aiContent.discussion_prompts)) {\n      discussionQuestions = aiContent.discussion_prompts;\n    } else if (aiContent.discussion_prompts) {\n      discussionQuestions = [aiContent.discussion_prompts];\n    }\n    \n    // Format vocabulary\n    let vocabularyString = '';\n    if (aiContent.vocabulary_practice) {\n      vocabularyString = aiContent.vocabulary_practice;\n    } else if (originalData.vocabulary_focus) {\n      vocabularyString = originalData.vocabulary_focus.join('; ');\n    }\n    \n    items.push({\n      json: {\n        // Required fields for Canadian_Content table\n        content_title: aiContent.title || originalData.curriculum_standard,\n        \n        // Source information\n        source_type: 'ONTARIO_EDU',\n        source_url: 'https://www.ontario.ca/page/elementary-curriculum',\n        source_category: originalData.subject,\n        source_date: new Date().toISOString(),\n        \n        // Educational content\n        simplified_content: aiContent.introduction + ' ' + (aiContent.main_content || ''),\n        curriculum_connection: originalData.curriculum_standard,\n        activity_suggestion: activityString,\n        canadian_fact: aiContent.canadian_connection || 'Based on Ontario curriculum',\n        vocabulary_word: vocabularyString,\n        discovery_questions: JSON.stringify(discussionQuestions),\n        \n        // Additional fields\n        materials_needed: aiContent.materials_needed || 'Basic classroom supplies',\n        \n        // Metadata\n        content_score: 1.0, // Curriculum-based content has highest score\n        has_educational_value: true,\n        appropriateness_score: 1.0,\n        workflow_version: 'curriculum-generator-v1.0',\n        pipeline_timestamp: new Date().toISOString(),\n        \n        // Quality metrics\n        reading_level: 'Grade 4',\n        canadian_context: true,\n        curriculum_aligned: true,\n        validation_status: 'Approved', // Pre-approved as curriculum-based\n        \n        // Categories\n        subject_areas: [originalData.subject],\n        skill_focus: ['Critical Thinking', 'Problem Solving', 'Communication'],\n        activity_type: [originalData.content_format],\n        time_estimate: originalData.duration,\n        season_relevant: ['All Year']\n      }\n    });\n  } catch (error) {\n    console.error('Error formatting content:', error);\n  }\n}\n\nreturn items;"
      },
      "id": "format-content",
      "name": "Format for Canadian Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "operation": "create",
        "baseId": "app1FNYWApMBYHob0",
        "tableId": "tbl3TRQh28Z2szbZe",
        "options": {}
      },
      "id": "save-content",
      "name": "Save to Canadian Content",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1450, 400],
      "credentials": {
        "airtableTokenApi": {
          "id": "Airtable API",
          "name": "Airtable API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log generation results and update metrics\nconst results = {\n  timestamp: new Date().toISOString(),\n  workflow: 'Curriculum-Based Content Generator',\n  contentGenerated: $input.all().length,\n  status: 'success',\n  content: []\n};\n\nfor (const item of $input.all()) {\n  results.content.push({\n    title: item.json.content_title,\n    subject: item.json.source_category,\n    type: item.json.activity_type?.[0] || 'lesson',\n    saved: true\n  });\n}\n\nconsole.log('Content Generation Results:', results);\n\n// Prepare metrics update\nconst metrics = {\n  date: new Date().toISOString().split('T')[0],\n  source: 'ONTARIO_EDU_GENERATOR',\n  items_generated: results.contentGenerated,\n  items_approved: results.contentGenerated,\n  items_rejected: 0,\n  rejection_rate: 0,\n  processing_time_ms: 5000, // Estimated\n  api_calls: results.contentGenerated * 2, // Fetch + Generate\n  estimated_cost: results.contentGenerated * 0.002 // ~$0.002 per item\n};\n\nreturn [{ json: { results, metrics } }];"
      },
      "id": "log-metrics",
      "name": "Log and Update Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 400]
    },
    {
      "parameters": {
        "operation": "create",
        "baseId": "app1FNYWApMBYHob0",
        "tableId": "tblSzrRCfI00AR4dd",
        "options": {}
      },
      "id": "save-metrics",
      "name": "Save Metrics",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1850, 400],
      "credentials": {
        "airtableTokenApi": {
          "id": "Airtable API",
          "name": "Airtable API"
        }
      }
    }
  ],
  "connections": {
    "Every 6 Hours": {
      "main": [
        [
          {
            "node": "Fetch Curriculum Standards",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Fetch Curriculum Standards",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Curriculum Standards": {
      "main": [
        [
          {
            "node": "Select Standards",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Standards": {
      "main": [
        [
          {
            "node": "Generate Content Ideas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content Ideas": {
      "main": [
        [
          {
            "node": "Generate Educational Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Educational Content": {
      "main": [
        [
          {
            "node": "Format for Canadian Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for Canadian Content": {
      "main": [
        [
          {
            "node": "Save to Canadian Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Canadian Content": {
      "main": [
        [
          {
            "node": "Log and Update Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log and Update Metrics": {
      "main": [
        [
          {
            "node": "Save Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "instanceId": "maple-tutor-curriculum-generator"
  },
  "tags": []
}