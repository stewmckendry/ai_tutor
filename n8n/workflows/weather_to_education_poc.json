{
  "name": "Weather to Education Content Pipeline (POC)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Every Hour",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "url": "https://weather.gc.ca/rss/city/ON-143_e.xml",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "toronto-weather",
      "name": "Fetch Toronto Weather",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "https://weather.gc.ca/rss/city/BC-74_e.xml",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "vancouver-weather",
      "name": "Fetch Vancouver Weather",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 500]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse weather XML and extract key data\nconst xml = $input.item.json.data;\nconst city = xml.includes('Toronto') ? 'Toronto' : 'Vancouver';\n\n// Extract temperature using regex\nconst tempMatch = xml.match(/Temperature:<\\/b>\\s*(-?\\d+\\.?\\d*)/);\nconst temperature = tempMatch ? tempMatch[1] : 'unknown';\n\n// Extract condition\nconst conditionMatch = xml.match(/Condition:<\\/b>\\s*([^<]+)/);\nconst condition = conditionMatch ? conditionMatch[1].trim() : 'unknown';\n\n// Extract humidity if available\nconst humidityMatch = xml.match(/Humidity:<\\/b>\\s*(\\d+)/);\nconst humidity = humidityMatch ? humidityMatch[1] : null;\n\n// Extract wind if available\nconst windMatch = xml.match(/Wind:<\\/b>\\s*([^<]+)/);\nconst wind = windMatch ? windMatch[1].trim() : null;\n\n// Create timestamp\nconst timestamp = new Date().toISOString();\n\nreturn {\n  city: city,\n  temperature: temperature,\n  condition: condition,\n  humidity: humidity,\n  wind: wind,\n  timestamp: timestamp,\n  raw_data: xml.substring(0, 500) // Store first 500 chars for debugging\n};"
      },
      "id": "parse-weather",
      "name": "Parse Weather Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an Ontario Grade 4 teacher creating engaging science content about weather. You always:\n- Use Canadian spelling (colour, centre, favourite)\n- Use metric units (°C, km, cm)\n- Reference Ontario Grade 4 science curriculum\n- Focus on light and sound properties when possible\n- Write at a Grade 4 reading level\n- Make content fun and interactive"
            },
            {
              "role": "user", 
              "content": "Transform this weather data into educational content:\n\nLocation: {{ $json.city }}\nTemperature: {{ $json.temperature }}°C\nCondition: {{ $json.condition }}\n{{ $json.humidity ? 'Humidity: ' + $json.humidity + '%' : '' }}\n{{ $json.wind ? 'Wind: ' + $json.wind : '' }}\n\nCreate exactly this JSON structure:\n{\n  \"explanation\": \"A 2-3 sentence kid-friendly explanation of today's weather\",\n  \"science_connection\": \"How this weather relates to light or sound properties (1-2 sentences)\",\n  \"activity\": \"A simple hands-on activity idea (1-2 sentences)\",\n  \"fun_fact\": \"An interesting Canadian weather fact (1 sentence)\",\n  \"vocabulary\": \"One new science word with simple definition\"\n}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 500
        }
      },
      "id": "openai-enrichment",
      "name": "Create Educational Content",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [850, 400],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse OpenAI response and prepare for Airtable\nconst weatherData = $('Parse Weather Data').item.json;\nconst aiResponse = $input.item.json.message.content;\n\n// Parse the JSON response from OpenAI\nlet educationalContent;\ntry {\n  educationalContent = JSON.parse(aiResponse);\n} catch (error) {\n  // Fallback if JSON parsing fails\n  educationalContent = {\n    explanation: aiResponse,\n    science_connection: \"Weather connects to science!\",\n    activity: \"Observe the weather today\",\n    fun_fact: \"Canada has diverse weather\",\n    vocabulary: \"Temperature: how hot or cold something is\"\n  };\n}\n\n// Prepare record for Airtable (return fields directly)\nreturn {\n  location: weatherData.city,\n  temperature: parseFloat(weatherData.temperature),\n  condition: weatherData.condition,\n  raw_weather: JSON.stringify({\n    temp: weatherData.temperature,\n    condition: weatherData.condition,\n    humidity: weatherData.humidity,\n    wind: weatherData.wind\n  }),\n  enriched_content: educationalContent.explanation,\n  science_connection: educationalContent.science_connection,\n  activity_suggestion: educationalContent.activity,\n  fun_fact: educationalContent.fun_fact,\n  vocabulary_word: educationalContent.vocabulary,\n  workflow_version: \"mvp-v1.0\",\n  pipeline_timestamp: weatherData.timestamp\n};"
      },
      "id": "prepare-airtable",
      "name": "Prepare for Airtable",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "app1FNYWApMBYHob0",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "Dynamic_Content_Test",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": "={{ $json }}",
          "matchingColumns": [],
          "schema": []
        }
      },
      "id": "airtable-create",
      "name": "Save to Airtable",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1250, 400],
      "credentials": {
        "airtableTokenApi": {
          "id": "airtable-credentials",
          "name": "Airtable API"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Error handling and logging\nconst item = $input.item.json;\nconst error = $input.item.error;\n\nif (error) {\n  console.error('Pipeline Error:', error);\n  \n  // Format error for notification or logging\n  return {\n    status: 'error',\n    timestamp: new Date().toISOString(),\n    location: item.city || 'unknown',\n    error_message: error.message || 'Unknown error',\n    error_details: JSON.stringify(error),\n    workflow_version: 'mvp-v1.0'\n  };\n}\n\n// Success logging\nreturn {\n  status: 'success',\n  timestamp: new Date().toISOString(),\n  location: item.fields?.location || item.city,\n  records_created: 1,\n  workflow_version: 'mvp-v1.0'\n};"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 400],
      "continueOnFail": true
    }
  ],
  "connections": {
    "Every Hour": {
      "main": [
        [
          {
            "node": "Fetch Toronto Weather",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Vancouver Weather",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Fetch Toronto Weather",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Vancouver Weather",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Toronto Weather": {
      "main": [
        [
          {
            "node": "Parse Weather Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Vancouver Weather": {
      "main": [
        [
          {
            "node": "Parse Weather Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Weather Data": {
      "main": [
        [
          {
            "node": "Create Educational Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Educational Content": {
      "main": [
        [
          {
            "node": "Prepare for Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Airtable": {
      "main": [
        [
          {
            "node": "Save to Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Airtable": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "staticData": null,
  "tags": [
    {
      "name": "poc",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "name": "weather",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "name": "education",
      "createdAt": "2024-01-01T00:00:00.000Z"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "mvp-v1.0"
}