{
  "name": "Ontario Curriculum PDF Extraction Enhanced",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "weeksInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger-curriculum",
      "name": "Weekly Update",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "manual-trigger-curriculum",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "jsCode": "// Ontario Grade 4 Curriculum Documents\n// Direct URLs to curriculum PDFs for each subject\n\nconst curriculumDocs = [\n  {\n    subject: 'Science and Technology',\n    grade: '1-8',\n    url: 'https://assets-us-01.kc-usercontent.com/fbd574c4-da36-0066-a0c5-849ffb2de96e/b2b8a36a-3986-4be2-b664-ec3f6fb7f195/science-and-technology-grades-1-8-2022.pdf',\n    description: 'Science and technology curriculum for elementary grades',\n    strands: ['STEM Skills and Connections', 'Life Systems', 'Matter and Energy', 'Structures and Mechanisms', 'Earth and Space Systems']\n  },\n  {\n    subject: 'Mathematics',\n    grade: '1-8',\n    url: 'https://assets-us-01.kc-usercontent.com/fbd574c4-da36-0066-a0c5-849ffb2de96e/c86ec53b-671d-498e-b431-124775e0c167/elementary-math-2020-curriculum.pdf',\n    description: 'Mathematics curriculum including number sense, measurement, geometry',\n    strands: ['Number', 'Algebra', 'Data', 'Spatial Sense', 'Financial Literacy']\n  },\n  {\n    subject: 'Language',\n    grade: '1-8', \n    url: 'https://assets-us-01.kc-usercontent.com/fbd574c4-da36-0066-a0c5-849ffb2de96e/d353cb77-b056-4c65-903f-b3012039d088/elementary-language-2023-curriculum.pdf',\n    description: 'Language arts curriculum for reading, writing, and oral communication',\n    strands: ['Oral Communication', 'Reading', 'Writing', 'Media Literacy']\n  },\n  {\n    subject: 'Social Studies',\n    grade: '1-6',\n    url: 'https://assets-us-01.kc-usercontent.com/fbd574c4-da36-0066-a0c5-849ffb2de96e/49c4d7eb-69f0-4263-aea2-1e8fa88de219/social-studies-grades-1-6-history-geography-2023.pdf',\n    description: 'History and geography curriculum',\n    strands: ['Heritage and Identity', 'People and Environments']\n  },\n  {\n    subject: 'The Arts',\n    grade: '1-8',\n    url: 'https://assets-us-01.kc-usercontent.com/fbd574c4-da36-0066-a0c5-849ffb2de96e/61b7f89f-9e0d-4994-b381-5c483d950132/arts18b09curr.pdf',\n    description: 'Arts curriculum including visual arts, music, drama, and dance',\n    strands: ['Dance', 'Drama', 'Music', 'Visual Arts']\n  },\n  {\n    subject: 'Health and Physical Education',\n    grade: '1-8',\n    url: 'https://assets-us-01.kc-usercontent.com/fbd574c4-da36-0066-a0c5-849ffb2de96e/9da49a3f-5a68-4117-b573-fda18f4ba324/health-and-physical-education-grades-1-8-2019.pdf',\n    description: 'Health education and physical activity curriculum',\n    strands: ['Active Living', 'Movement Competence', 'Healthy Living']\n  },\n  {\n    subject: 'French as a Second Language',\n    grade: '4-8',\n    url: 'https://assets-us-01.kc-usercontent.com/fbd574c4-da36-0066-a0c5-849ffb2de96e/5b89886a-afde-498a-b38f-e7dcf2d6978e/fsl-elementary-2013.pdf',\n    description: 'French language learning for English-speaking students',\n    strands: ['Listening', 'Speaking', 'Reading', 'Writing']\n  }\n];\n\n// Filter for documents that include Grade 4\nconst grade4Docs = curriculumDocs.filter(doc => {\n  const gradeRange = doc.grade.split('-').map(g => parseInt(g));\n  return gradeRange[0] <= 4 && gradeRange[1] >= 4;\n});\n\n// Return documents for processing\nreturn grade4Docs.map(doc => ({\n  json: {\n    subject: doc.subject,\n    grade_range: doc.grade,\n    pdf_url: doc.url,\n    description: doc.description,\n    strands: doc.strands,\n    target_grade: 4,\n    document_name: `${doc.subject} Curriculum (Grades ${doc.grade})`\n  }\n}));"
      },
      "id": "generate-document-list",
      "name": "Generate Document List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 400]
    },
    {
      "parameters": {
        "url": "={{ $json.pdf_url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "id": "download-pdf",
      "name": "Download Curriculum PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 400]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {
          "pages": "all"
        }
      },
      "id": "extract-pdf-text",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [850, 400]
    },
    {
      "parameters": {
        "jsCode": "// Parse Grade 4 specific content from curriculum PDF\nconst items = [];\n\nfor (const item of $input.all()) {\n  const text = item.json.data || '';\n  const metadata = item.json;\n  \n  // Extract Grade 4 specific sections\n  const grade4Content = extractGrade4Curriculum(text, metadata.subject, metadata.strands);\n  \n  // Create items for each strand/topic found\n  for (const section of grade4Content) {\n    items.push({\n      json: {\n        subject: metadata.subject,\n        document_source: metadata.pdf_url,\n        document_name: metadata.document_name,\n        grade: 4,\n        strand: section.strand,\n        topic: section.topic,\n        overall_expectations: section.overall,\n        specific_expectations: section.specific,\n        examples: section.examples,\n        teaching_tips: section.tips,\n        raw_text: section.text,\n        needs_enrichment: true\n      }\n    });\n  }\n}\n\nfunction extractGrade4Curriculum(text, subject, strands) {\n  const sections = [];\n  \n  // Common patterns in Ontario curriculum documents\n  const patterns = {\n    grade4: [\n      /Grade 4[\\s\\S]*?(?=Grade [5-8]|Overall Expectations|$)/gi,\n      /Grade Four[\\s\\S]*?(?=Grade|Overall|$)/gi,\n      /4\\.[\\s\\S]*?(?=\\d\\.|Overall|$)/gi\n    ],\n    overall: /Overall Expectation[s]?[:]?([\\s\\S]*?)(?=Specific|Example|Grade|$)/gi,\n    specific: /Specific Expectation[s]?[:]?([\\s\\S]*?)(?=Overall|Example|Grade|Teacher|Sample|$)/gi,\n    examples: /Example[s]?[:]?([\\s\\S]*?)(?=Overall|Specific|Grade|Teacher|$)/gi,\n    tips: /Teacher Prompt[s]?[:]?([\\s\\S]*?)(?=Overall|Specific|Grade|Student|$)/gi\n  };\n  \n  // Try to find Grade 4 content for each strand\n  for (const strand of strands) {\n    // Look for strand-specific Grade 4 content\n    const strandPattern = new RegExp(`${strand}[\\s\\S]*?Grade 4[\\s\\S]*?(?=Grade [5-8]|${strands.join('|')}|$)`, 'gi');\n    const strandMatches = text.match(strandPattern) || [];\n    \n    for (const match of strandMatches) {\n      const overallMatch = match.match(patterns.overall);\n      const specificMatch = match.match(patterns.specific);\n      const examplesMatch = match.match(patterns.examples);\n      const tipsMatch = match.match(patterns.tips);\n      \n      // Extract topic from the content\n      const topicMatch = match.match(/([A-Z][^.!?]*(?:Grade 4)[^.!?]*)/i);\n      const topic = topicMatch ? topicMatch[1].trim() : strand;\n      \n      sections.push({\n        strand: strand,\n        topic: topic,\n        overall: overallMatch ? cleanText(overallMatch[0]) : '',\n        specific: specificMatch ? cleanText(specificMatch[0]) : '',\n        examples: examplesMatch ? cleanText(examplesMatch[0]) : '',\n        tips: tipsMatch ? cleanText(tipsMatch[0]) : '',\n        text: match.substring(0, 3000) // Limit text for processing\n      });\n    }\n  }\n  \n  // If no Grade 4 specific content found, extract general elementary content\n  if (sections.length === 0) {\n    // Look for elementary/primary content that would include Grade 4\n    const elementaryPatterns = [\n      /Elementary[\\s\\S]{0,5000}/gi,\n      /Primary[\\s\\S]{0,5000}/gi,\n      /Junior[\\s\\S]{0,5000}/gi\n    ];\n    \n    for (const pattern of elementaryPatterns) {\n      const matches = text.match(pattern) || [];\n      if (matches.length > 0) {\n        const content = matches[0];\n        \n        for (const strand of strands.slice(0, 2)) { // Process first 2 strands\n          sections.push({\n            strand: strand,\n            topic: `${subject} - ${strand}`,\n            overall: `General expectations for ${strand}`,\n            specific: extractExpectations(content),\n            examples: '',\n            tips: '',\n            text: content.substring(0, 3000)\n          });\n        }\n        break;\n      }\n    }\n  }\n  \n  // If still no content, create placeholder\n  if (sections.length === 0) {\n    sections.push({\n      strand: strands[0] || 'General',\n      topic: `${subject} Curriculum Overview`,\n      overall: 'Curriculum document for Grade 4',\n      specific: text.substring(0, 1500),\n      examples: '',\n      tips: '',\n      text: text.substring(0, 3000)\n    });\n  }\n  \n  return sections;\n}\n\nfunction cleanText(text) {\n  // Remove extra whitespace and format\n  return text\n    .replace(/\\s+/g, ' ')\n    .replace(/Overall Expectation[s]?[:]?/gi, '')\n    .replace(/Specific Expectation[s]?[:]?/gi, '')\n    .replace(/Example[s]?[:]?/gi, '')\n    .replace(/Teacher Prompt[s]?[:]?/gi, '')\n    .trim()\n    .substring(0, 1500);\n}\n\nfunction extractExpectations(text) {\n  // Extract numbered items that look like expectations\n  const expectations = [];\n  const patterns = [\n    /\\d+\\.\\s+[A-Z][^.]+\\./g,\n    /[a-z]\\)\\s+[A-Z][^.]+\\./g,\n    /â€¢\\s+[A-Z][^.]+\\./g\n  ];\n  \n  for (const pattern of patterns) {\n    const matches = text.match(pattern) || [];\n    expectations.push(...matches.slice(0, 5)); // Max 5 expectations\n  }\n  \n  return expectations.join(' ') || text.substring(0, 1000);\n}\n\nreturn items;"
      },
      "id": "parse-grade4-content",
      "name": "Parse Grade 4 Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "resource": "assistant",
        "operation": "create",
        "modelId": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an Ontario curriculum specialist extracting Grade 4 learning standards.\n\nFrom the curriculum text provided, create structured educational content that:\n1. Identifies specific Grade 4 expectations\n2. Translates curriculum language into student-friendly terms\n3. Creates actionable learning objectives\n4. Suggests hands-on activities\n5. Makes connections to real-world applications\n\nFocus on what Grade 4 students (ages 9-10) should:\n- Know (knowledge)\n- Do (skills)\n- Understand (big ideas)\n\nOutput as JSON with these fields:\n- strand_name: The curriculum strand/topic area\n- big_idea: Main concept in one kid-friendly sentence\n- learning_goals: Array of 3-5 specific things students will learn\n- success_criteria: Array of 3-4 ways students show understanding\n- key_vocabulary: Object with 3-5 terms and simple definitions\n- real_world_connections: How this applies to students' daily lives in Ontario\n- cross_curricular_links: Array of connections to other subjects\n- indigenous_perspectives: Indigenous knowledge connections (if applicable)\n- sample_activities: Array of 2-3 hands-on activity ideas\n- assessment_suggestions: Array of 2-3 ways to check understanding"
            },
            {
              "role": "user",
              "content": "Extract and structure Grade 4 curriculum from:\n\nSubject: {{ $json.subject }}\nStrand: {{ $json.strand }}\nTopic: {{ $json.topic }}\n\nOverall Expectations:\n{{ $json.overall_expectations }}\n\nSpecific Expectations:\n{{ $json.specific_expectations }}\n\nExamples:\n{{ $json.examples }}\n\nTeaching Tips:\n{{ $json.teaching_tips }}\n\nCreate structured, actionable curriculum content for Ontario Grade 4 students."
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 1000
        }
      },
      "id": "openai-structure",
      "name": "Structure with GPT-4",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [1250, 400],
      "credentials": {
        "openAiApi": {
          "id": "OpenAI API",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format structured curriculum for Airtable\nconst items = [];\n\nfor (const item of $input.all()) {\n  try {\n    // Parse AI response\n    let aiResponse = {};\n    const responseText = item.json.response?.text || item.json.response || '';\n    \n    try {\n      aiResponse = JSON.parse(responseText);\n    } catch (e) {\n      console.error('Failed to parse AI response:', e);\n      aiResponse = {\n        strand_name: item.json.strand,\n        big_idea: 'Curriculum content for processing',\n        learning_goals: [],\n        success_criteria: [],\n        key_vocabulary: {},\n        sample_activities: []\n      };\n    }\n    \n    const originalData = item.json;\n    \n    items.push({\n      json: {\n        // Identification\n        standard_title: `${originalData.subject} - ${aiResponse.strand_name || originalData.strand}`,\n        subject: originalData.subject,\n        grade_level: 4,\n        strand: aiResponse.strand_name || originalData.strand,\n        document_source: originalData.document_source,\n        \n        // Core content\n        big_idea: aiResponse.big_idea || originalData.topic,\n        learning_goals: JSON.stringify(aiResponse.learning_goals || []),\n        success_criteria: JSON.stringify(aiResponse.success_criteria || []),\n        \n        // Expectations\n        overall_expectation: originalData.overall_expectations || '',\n        specific_expectations: originalData.specific_expectations || '',\n        \n        // Vocabulary and connections\n        key_vocabulary: JSON.stringify(aiResponse.key_vocabulary || {}),\n        real_world_connections: aiResponse.real_world_connections || '',\n        cross_curricular_links: JSON.stringify(aiResponse.cross_curricular_links || []),\n        indigenous_perspectives: aiResponse.indigenous_perspectives || '',\n        \n        // Activities and assessment\n        sample_activities: JSON.stringify(aiResponse.sample_activities || []),\n        assessment_suggestions: JSON.stringify(aiResponse.assessment_suggestions || []),\n        \n        // Metadata\n        extraction_date: new Date().toISOString(),\n        workflow_version: 'curriculum-extract-v2.0',\n        ai_enriched: true,\n        validation_status: 'Pending Review'\n      }\n    });\n  } catch (error) {\n    console.error('Error formatting curriculum:', error);\n    // Still create a record even if processing fails\n    items.push({\n      json: {\n        standard_title: `${item.json.subject} - ${item.json.strand}`,\n        subject: item.json.subject,\n        grade_level: 4,\n        strand: item.json.strand,\n        document_source: item.json.document_source,\n        big_idea: item.json.topic || 'Processing error',\n        learning_goals: '[]',\n        success_criteria: '[]',\n        overall_expectation: item.json.overall_expectations || '',\n        specific_expectations: item.json.specific_expectations || '',\n        key_vocabulary: '{}',\n        real_world_connections: '',\n        cross_curricular_links: '[]',\n        indigenous_perspectives: '',\n        sample_activities: '[]',\n        assessment_suggestions: '[]',\n        extraction_date: new Date().toISOString(),\n        workflow_version: 'curriculum-extract-v2.0',\n        ai_enriched: false,\n        validation_status: 'Needs Revision'\n      }\n    });\n  }\n}\n\nreturn items;"
      },
      "id": "format-for-airtable",
      "name": "Format for Airtable",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "operation": "create",
        "baseId": "app1FNYWApMBYHob0",
        "tableId": "tblHnzD5St4QA5m5N",
        "options": {}
      },
      "id": "save-to-airtable",
      "name": "Save to Curriculum Table",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1650, 400],
      "credentials": {
        "airtableTokenApi": {
          "id": "Airtable API",
          "name": "Airtable API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log extraction results\nconst results = {\n  timestamp: new Date().toISOString(),\n  workflow: 'Ontario Curriculum PDF Extraction Enhanced',\n  documentsProcessed: $input.all().length,\n  status: 'success',\n  standards: []\n};\n\nfor (const item of $input.all()) {\n  results.standards.push({\n    title: item.json.standard_title,\n    subject: item.json.subject,\n    strand: item.json.strand,\n    saved: true\n  });\n}\n\nconsole.log('Curriculum Extraction Results:', results);\nreturn [results];"
      },
      "id": "log-results",
      "name": "Log Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 400]
    }
  ],
  "connections": {
    "Weekly Update": {
      "main": [
        [
          {
            "node": "Generate Document List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Generate Document List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Document List": {
      "main": [
        [
          {
            "node": "Download Curriculum PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Curriculum PDF": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Parse Grade 4 Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Grade 4 Content": {
      "main": [
        [
          {
            "node": "Structure with GPT-4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structure with GPT-4": {
      "main": [
        [
          {
            "node": "Format for Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for Airtable": {
      "main": [
        [
          {
            "node": "Save to Curriculum Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Curriculum Table": {
      "main": [
        [
          {
            "node": "Log Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "instanceId": "maple-tutor-curriculum-enhanced"
  },
  "tags": []
}