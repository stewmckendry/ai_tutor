{
  "name": "Statistics Canada Demographics Pipeline",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "days",
              "daysInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger-stats",
      "name": "Daily Update",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "manual-trigger-stats",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "url": "https://www150.statcan.gc.ca/t1/wds/rest/getDataFromCubePidCoordAndLatestNPeriods",
        "method": "POST",
        "headers": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "body": "[{\"productId\":17100005,\"coordinate\":\"1.1.1.1.1\",\"latestN\":1}]",
        "options": {}
      },
      "id": "fetch-population-data",
      "name": "Fetch Population Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "https://www150.statcan.gc.ca/t1/wds/rest/getDataFromCubePidCoordAndLatestNPeriods",
        "method": "POST",
        "headers": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "body": "[{\"productId\":13100810,\"coordinate\":\"1.2.1\",\"latestN\":1}]",
        "options": {}
      },
      "id": "fetch-education-stats",
      "name": "Fetch Education Statistics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 500]
    },
    {
      "parameters": {
        "jsCode": "// Process Statistics Canada demographic data for Grade 4\nconst results = [];\n\n// Helper function to format large numbers for Grade 4\nfunction formatNumberForGrade4(num) {\n  const number = parseInt(num);\n  if (number > 10000) {\n    // Round to nearest thousand for Grade 4 comprehension\n    const thousands = Math.round(number / 1000);\n    return `about ${thousands} thousand`;\n  }\n  return number.toLocaleString('en-CA');\n}\n\n// Process each data response\nfor (const item of $input.all()) {\n  try {\n    const data = item.json;\n    \n    if (data.object && data.object.length > 0) {\n      const record = data.object[0];\n      \n      // Extract key information\n      const value = record.dataPointValue || record.value;\n      const refDate = record.refPer || record.referenceDate || 'Recent';\n      const geo = record.geoName || 'Canada';\n      const metric = record.memberName || 'Population';\n      \n      // Create educational content from the data\n      const educationalData = {\n        topic: metric,\n        location: geo,\n        value: formatNumberForGrade4(value),\n        raw_value: value,\n        date: refDate,\n        \n        // Educational context\n        kid_friendly_comparison: generateComparison(value, metric),\n        math_problem: generateMathProblem(value, metric, geo),\n        visual_activity: generateVisualActivity(value, metric),\n        \n        // Canadian context\n        province_fact: generateProvinceFact(geo),\n        \n        // Metadata\n        source: 'Statistics Canada',\n        data_type: 'Demographics',\n        grade_appropriate: true\n      };\n      \n      results.push(educationalData);\n    }\n  } catch (error) {\n    console.error('Error processing stats data:', error);\n  }\n}\n\n// Helper functions for educational content\nfunction generateComparison(value, metric) {\n  const num = parseInt(value);\n  \n  if (metric.includes('Population')) {\n    if (num > 1000000) {\n      const schools = Math.round(num / 500); // Average school size\n      return `That's like having ${formatNumberForGrade4(schools)} schools full of students!`;\n    } else if (num > 10000) {\n      const arenas = Math.round(num / 5000); // Average arena capacity\n      return `That's enough people to fill ${arenas} hockey arenas!`;\n    }\n  }\n  \n  return `That's a lot of people - more than you could count in a whole day!`;\n}\n\nfunction generateMathProblem(value, metric, location) {\n  const num = Math.min(parseInt(value), 10000); // Keep within Grade 4 range\n  \n  return `If ${location} has ${formatNumberForGrade4(num)} people, and 100 new families move there, how many more people is that if each family has 4 members?`;\n}\n\nfunction generateVisualActivity(value, metric) {\n  return `Draw a bar graph comparing this number to your class size. How many times bigger is it?`;\n}\n\nfunction generateProvinceFact(location) {\n  const facts = {\n    'Ontario': 'Ontario has more people than any other province - over 14 million!',\n    'Quebec': 'Quebec is the largest province by area in Canada!',\n    'British Columbia': 'BC has mountains, oceans, and rainforests all in one province!',\n    'Alberta': 'Alberta is home to the famous Calgary Stampede!',\n    'Canada': 'Canada is the second-largest country in the world by area!'\n  };\n  \n  return facts[location] || `${location} is an amazing part of Canada with its own unique features!`;\n}\n\nreturn results;"
      },
      "id": "process-demographic-data",
      "name": "Process Demographic Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "resource": "assistant",
        "operation": "create",
        "modelId": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are Maple, making Canadian demographic data exciting for Grade 4 students!\n\nTransform statistics into:\n1. Relatable comparisons (size of their school, hockey rinks, Tim Hortons)\n2. Visual activity ideas (graphs, charts, maps)\n3. Math problems at Grade 4 level (numbers up to 10,000)\n4. Community connections\n5. Fun facts about Canadian populations\n\nAlways:\n- Use simple language\n- Round large numbers appropriately\n- Compare to familiar Canadian things\n- Include Indigenous peoples respectfully\n- Make data visual and tangible\n\nOutput as JSON with:\n- simple_explanation (what the data means in 2 sentences)\n- math_connection (Grade 4 math problem using the data)\n- mapping_activity (geography/visual activity)\n- community_link (how it relates to their community)\n- fun_comparison (relatable size comparison)\n- explore_questions (array of 3 discovery questions)"
            },
            {
              "role": "user",
              "content": "Make this demographic data engaging for Grade 4:\n\nTopic: {{ $json.topic }}\nLocation: {{ $json.location }}\nValue: {{ $json.value }}\nComparison: {{ $json.kid_friendly_comparison }}\n\nCreate content that helps students understand their country through numbers!"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 500
        }
      },
      "id": "openai-demographics",
      "name": "OpenAI Demographics Enrichment",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [850, 400],
      "credentials": {
        "openAiApi": {
          "id": "OpenAI API",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format demographic data for Airtable\nconst items = [];\n\nfor (const item of $input.all()) {\n  try {\n    const aiResponse = JSON.parse(item.json.response.text || '{}');\n    const originalData = item.json;\n    \n    items.push({\n      json: {\n        // Source information\n        source_type: 'STATS_CANADA',\n        source_url: 'https://www.statcan.gc.ca',\n        source_title: `${originalData.topic} - ${originalData.location}`,\n        source_category: 'Demographics',\n        source_date: new Date().toISOString(),\n        \n        // Educational content\n        simplified_content: aiResponse.simple_explanation || '',\n        curriculum_connection: aiResponse.math_connection || '',\n        activity_suggestion: aiResponse.mapping_activity || '',\n        canadian_fact: aiResponse.fun_comparison || '',\n        vocabulary_word: `Population: the number of people living in a place`,\n        discovery_questions: JSON.stringify(aiResponse.explore_questions || []),\n        \n        // Additional demographic fields\n        raw_data: JSON.stringify({\n          value: originalData.raw_value,\n          location: originalData.location,\n          date: originalData.date\n        }),\n        community_connection: aiResponse.community_link || '',\n        \n        // Metadata\n        content_score: 0.9,\n        has_educational_value: true,\n        workflow_version: 'stats-v1.0',\n        pipeline_timestamp: new Date().toISOString(),\n        \n        // Quality metrics\n        reading_level: 'Grade 4',\n        canadian_context: true,\n        curriculum_aligned: true,\n        subject_areas: JSON.stringify(['Math', 'Social Studies', 'Geography']),\n        skill_focus: JSON.stringify(['Data Analysis', 'Graphing', 'Comparison'])\n      }\n    });\n  } catch (error) {\n    console.error('Error formatting demographics:', error);\n  }\n}\n\nreturn items;"
      },
      "id": "format-demographics",
      "name": "Format for Airtable",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "operation": "create",
        "baseId": "={{ $env.AIRTABLE_BASE_ID }}",
        "tableId": "Canadian_Content",
        "options": {}
      },
      "id": "save-demographics",
      "name": "Save to Airtable",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1250, 400],
      "credentials": {
        "airtableTokenApi": {
          "id": "Airtable API",
          "name": "Airtable API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log pipeline results\nconst results = {\n  timestamp: new Date().toISOString(),\n  workflow: 'Statistics Canada Demographics',\n  recordsProcessed: $input.all().length,\n  status: 'success',\n  dataPoints: []\n};\n\nfor (const item of $input.all()) {\n  results.dataPoints.push({\n    location: JSON.parse(item.json.raw_data || '{}').location,\n    topic: item.json.source_title,\n    saved: true\n  });\n}\n\nconsole.log('Demographics Pipeline Results:', results);\nreturn [results];"
      },
      "id": "log-demographics",
      "name": "Log Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 400]
    }
  ],
  "connections": {
    "Daily Update": {
      "main": [
        [
          {
            "node": "Fetch Population Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Education Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Fetch Population Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Education Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Population Data": {
      "main": [
        [
          {
            "node": "Process Demographic Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Education Statistics": {
      "main": [
        [
          {
            "node": "Process Demographic Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Demographic Data": {
      "main": [
        [
          {
            "node": "OpenAI Demographics Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Demographics Enrichment": {
      "main": [
        [
          {
            "node": "Format for Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for Airtable": {
      "main": [
        [
          {
            "node": "Save to Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Airtable": {
      "main": [
        [
          {
            "node": "Log Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "instanceId": "maple-tutor-stats"
  },
  "tags": []
}